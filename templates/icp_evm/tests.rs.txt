use std::path::PathBuf;

use alloy::{
    hex::FromHex,
    primitives::{utils::parse_ether, Address, Uint, U256},
};
use candid::Principal;
use ic_test::{EvmUser, IcpTest, IcpUser};

use crate::bindings::{ {% for c in canisters %}
    {{ c.var_name }}::{self, {{c.service_name}}},{% endfor %}{% for c in contracts %}
    evm::{{ c.name }}::{self, {{c.name}}Instance},{% endfor %}
};

struct Env {
    test: IcpTest,{% for c in canisters %}
    {{ c.var_name }}: {{c.service_name}},{% endfor %}{% for c in contracts %}
    {{ c.var_name }}: {{c.name}}Instance<(), EvmUser>,{% endfor %}
    evm_user: EvmUser,
}

async fn setup(test: IcpTest) -> Env {
    let evm_user = test.evm.test_user(0);
    let icp_user = test.icp.test_user(0);

    let coprocessor = Coprocessor::deploy(evm_user.clone()).await.unwrap();

{% for c in canisters %}

    let {{c.var_name}} = {{c.var_name}}::deploy(
        &icp_user,
        // init args 
        // ...
    )
    .call()
    .await;
{% endfor %}

    // Additional setup steps
    // ...

    Env {
        test,
        evm_user,{% for c in canisters %}
        {{ c.var_name }},{% endfor %}{% for c in contracts %}
        {{ c.var_name }},{% endfor %}
    }
}

#[tokio::test]
async fn test_() {
    let Env {
        test,
        evm_user,{% for c in canisters %}
        {{ c.var_name }},{% endfor %}{% for c in contracts %}
        {{ c.var_name }},{% endfor %}
    } = setup(IcpTest::new().await).await;

    // Your test code
    // ...

}
