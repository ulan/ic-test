use std::path::PathBuf;

use candid::Principal;
use ic_test::{IcpTest, IcpUser};

use crate::bindings::{ {% for c in canisters %}
    {{ c.var_name }}::{self, {{c.service_name}}},{% endfor %}
};

pub(crate) struct Env {
    pub icp_test: IcpTest,{% for c in canisters %}
    pub {{ c.var_name }}: {{c.service_name}},{% endfor %}
}

pub(crate) async fn setup(icp_test: IcpTest) -> Env {
    let icp_user = icp_test.icp.test_user(0);

    // initialize canisters
{% for c in canisters %}

    let {{c.var_name}} = {{c.var_name}}::deploy(
        &icp_user,
        {{ c.init_args_rust }}
    )
    .call()
    .await;
{% endfor %}

    // Additional setup steps
    // ...

    Env {
        icp_test,{% for c in canisters %}
        {{ c.var_name }},{% endfor %}
    }
}
