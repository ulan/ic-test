#![allow(dead_code, unused_imports, non_snake_case)]

type CallMode = ic_test::CallMode;
type Caller = ic_test::IcUser;
type CallBuilder<R> = ic_test::CallBuilder<R, ic_test::IcUser>;
type DeployMode = ic_test::DeployMode;
type Deployer = ic_test::IcUser;
type DeployBuilder<C> = ic_test::DeployBuilder<C, Caller>;
{% for c in canisters %}
// candid: {{ c.candid.clone().unwrap_or("...".to_owned()) }}
// generated from: {{ c.gen_candid_file.clone().unwrap_or("...".to_owned()) }}
pub mod {{ c.canister_name }};
{% endfor %}
{% if !contracts.is_empty() %}
pub mod evm {
    use alloy::sol;
    {% for c in contracts %}
    sol!(
        #[sol(rpc)]
        {{ c.name }},
        "{{ c.sol_json}}",
    );
    {% endfor %}
}
{% endif %}